#!/usr/bin/env python
### Operation of the required tool(s)
csibelia = '/home/valencianaplop/program/sibelia/bin/C-Sibelia.py'
uclust = 'uclustq1.2.22_i86linux64'

### Test Data
#wdir = '/home/valencianaplop/mrsa/analysis'
#ref_file = 'HE681097.fasta'
#mlen = 500
#threshold = 0.9

### Import Library
import os
import sys
import glob
import trile
import time

###
def get_id_list(file_list):
	id_list = []
	for file1 in file_list:
		Id = os.path.basename(file1)
		Id = Id.split('.fasta')[0]
		id_list.append(Id)
	return id_list

def get_NSR(wdir,ref_file,mlen,file_list):
	os.chdir(wdir)
        ref = ref_file
        #file_list = glob.glob(os.path.join(wdir,'assembly','*.fasta'))
        try:
                os.mkdir(os.path.join(wdir,'NSR'))
        except:
                pass
        os.chdir(os.path.join(wdir,'NSR'))
        for file1 in file_list:
                name = os.path.basename(file1).split('.fasta')[0]
                cmd = csibelia+' -o '+name
                cmd+= ' -u '+name+'.fasta'
                cmd+= ' -m '+str(mlen)
                cmd+= ' -v '+name+'.vcf'
                cmd+= ' '+ref +' '+file1
                os.system(cmd)
                os.system('mv '+os.path.join(name,name+'.fasta')+' ./')
                os.system('mv '+os.path.join(name,name+'.vcf')+' ./')
                os.system('rm -r '+name)

def format_NSR(wdir):
	os.chdir(wdir)
        try:
                os.mkdir(os.path.join(wdir,'format_NSR'))
        except:
                pass
        file_list = glob.glob(os.path.join(wdir,'NSR','*.fasta'))
        for file1 in file_list:
                name = os.path.basename(file1).split('.fasta')[0]
                fasta = trile.read_fasta(file1)
                save = open(os.path.join(wdir,'format_NSR',name+'.fasta'),'w')
                count = 0
                for head in fasta.keys():
                        count+=1
                        save.write('>'+name+'.'+str(count)+'\n')
                        save.write(fasta.get(head)+'\n')
                save.close()

def cluster_NSR(wdir,threshold):
	os.chdir(wdir)
        try:
                os.mkdir(os.path.join(wdir,'cluster_NSR'))
        except:
                pass
        os.chdir(os.path.join(wdir,'cluster_NSR'))
        file_list = glob.glob(os.path.join(wdir,'format_NSR','*.fasta'))
        for file1 in file_list:
                name = os.path.basename(file1).split('.fasta')[0]
                cmd = uclust+' --sort '+file1
                cmd+= ' --output '+os.path.basename(file1)
		cmd+= ' --quiet'
                os.system(cmd)

                cmd = uclust+' --input '+os.path.basename(file1)
                cmd+= ' --uc '+name+'.uc'
		cmd+= ' --quiet'
                os.system(cmd)

                cmd = uclust+' --input '+name+'.fasta --uc2fasta '
                cmd+= name+'.uc --types S --output '
                cmd+= name+'.fasta.tmp'
		cmd+= ' --id '+str(threshold)
		cmd+= ' --quiet'
                os.system(cmd)
                os.system('mv '+name+'.fasta.tmp '+name+'.fasta')
                os.system('rm '+name+'.uc')

                fasta = trile.read_fasta(name+'.fasta')
                save = open(name+'.fasta','w')
                count = 0
                for head in fasta.keys():
                        count+=1
                        save.write('>'+name+'.'+str(count)+'\n')
                        save.write(fasta.get(head)+'\n')
                save.close()

def cluster_all(wdir,threshold):
        os.chdir(wdir)
        file_list = glob.glob(os.path.join(wdir,'cluster_NSR','*.fasta'))
        save=open('all.fasta','w')
        for file1 in file_list:
                fasta = trile.read_fasta(file1)
                for head in fasta.keys():
                        save.write('>'+head+'\n')
                        save.write(fasta.get(head)+'\n')
        save.close()

        file1 = 'all.fasta'
        name = 'all'
        cmd = uclust+' --sort '+file1
        cmd+= ' --output '+file1+'.tmp'
	cmd+= ' --quiet'
        os.system(cmd)

        cmd = uclust+' --input '+file1+'.tmp'
        cmd+= ' --uc '+name+'.uc'
	cmd+= ' --quiet'
        os.system(cmd)

        cmd = uclust+' --input '+name+'.fasta --uc2fasta '
        cmd+= name+'.uc --output '
        cmd+= name+'.fasta.tmp2'
	cmd+= ' --id '+str(threshold)
	cmd+= ' --quiet'
        os.system(cmd)
        os.system('mv '+name+'.fasta.tmp2 '+name+'.fasta')
        os.system('rm '+name+'.uc '+name+'.fasta.tmp')

def index_cluster(wdir):
        os.chdir(wdir)
        read = open('all.fasta')
        save = open('all.fasta.tmp','w')
        count = 0
        heads,seqs,head,seq = list(),list(),list(),str()
        for line in read:
                if line!='' and line[0]=='>':
                        if '|*|' in line:
                                Id = '>I'+str(count)+'|'
                                final_head = Id+'|'.join(head)
                                heads.append(final_head)
                                seqs.append(seq)
                                count+=1
                                head=[(line.split('|')[-1].split('.')[0])]
                                seq = next(read).replace('\n','')
                        else:
                                head2 = line.split('|')[-1].split('.')[0]
                                if head2 not in head:
                                        head.append(head2)
        heads = heads[1:]
        seqs = seqs[1:]
        for i in range(len(heads)):
                save.write(heads[i]+'\n'+seqs[i]+'\n')
        os.system('mv all.fasta.tmp all.fasta')

def distance_array(wdir,id_list):
        os.chdir(wdir)
        read = open('all.fasta')
        save = open('all.tsv','w')
        for line in read:
                if line!='' and line[0]=='>':
                        Id = line.split('|')[0][1:]
                        save.write('\t'+Id)

        #id_list = open('id_list.txt').read().splitlines()
        for line in id_list+['reference']:
                Id = line.split('\t')[-1]
                save.write('\n'+Id)
                read = open('all.fasta')
                score = 0
                for line2 in read:
                        if line2!='' and line2[0]=='>':
                                if '|'+Id in line2:
                                        score = 1
                                else:
                                        score = 0
                                save.write('\t'+str(score))
        save.close()

def Matrix2Mega(path, outpath):
        def comp(row1, row2):
                d = []
                result = 0
                for trace in range(1, len(row1)):
                        r1 = float(row1[trace])
                        r2 = float(row2[trace])
                        d.append(abs(r1-r2))
                for diff in d:
                        result+=diff
                return result
        def read_matrix(path):
                matrix = open(path)
                data = matrix.readlines()[1:]
                records = []
                for row in data:
                        record = row.split('\t')
                        records.append(record[:])
                return records
	def write_mega(hash,outpath):
                output = open(outpath, 'w')
                output.write("#mega\n!Title: matrix.matrix;\n\n")
                s = ''
                for i in range(len(hash)):
                        s += '['+str(i+1)+'] ' +'#' + hash[i] + '\n'
                output.write(s+'\n')
                s = ''
                for i in range(len(hash)):
                        s += '\t'+str(i+1)
                output.write('[' + s+']\n')
                for i in range(len(dmatrix)):
                        s = []
                        for j in range(i):
                                s.append(str(dmatrix[i][j]))
                        string = '\t'.join(s)
                        output.write('['+str(i+1)+']\t'+string+'\n')
        def generate_matrix(records):
                result = []
                for i in range(len(records)):
                        result.append([])
                        for j in range(len(records)):
                                result[i].append(0)
                for i in range(len(records)):
                        for j in range (i+1, len(records)):
                                result[i][j] = comp(records[i], records[j])
                                result[j][i] = comp(records[i], records[j])
                return result
	matrix = read_matrix(path)
        dmatrix=generate_matrix(matrix)
        hash = []
        for record in matrix:
                hash.append(record[0])
        write_mega(hash, outpath)

def convert_to_MEG(wdir):
        os.chdir(wdir)
        Matrix2Mega('all.tsv','all.meg')
	os.system('rm all.tsv')

def refine_path(path):
	if type(path)==str:
		return os.path.abspath(path)
	else:
		for i in range(len(path)):
			path[i]=os.path.abspath(path[i])
		return path

###
def main():
	start = time.time()
	wdir = trile.get_argv('output',str,'./')
	print 'output is set as',wdir
	ref = refine_path(trile.get_argv('ref',str,None))
	print 'ref is set as',ref
	mlen = trile.get_argv('minlen',int,500)
	print 'minlen is set as',mlen
	threshold = trile.get_argv('id',float,0.9)
	print 'id is set as',threshold
	file_list = refine_path(trile.get_argv('assembly',list,None))
	print 'assembly is set as',file_list
	id_list = get_id_list(file_list)

	try:
		os.mkdir(wdir)
	except:
		pass
	wdir = os.path.abspath(wdir)

	get_NSR(wdir,ref,mlen,file_list)
	print '[1/7]Done getting NSR'
	format_NSR(wdir)
	print '[2/7]Done formatting NSR'
	cluster_NSR(wdir,threshold)
	print '[3/7]Done clustering each isolate'
	cluster_all(wdir,threshold)
	print '[4/7]Done clustering all isolates'
	index_cluster(wdir)
	print '[5/7]Done indexing clusters'
	distance_array(wdir,id_list)
	print '[6/7]Done calculating distance'
	convert_to_MEG(wdir)
	print '[7/7]Done converting to MEG'
	print '\nRunning time:\t',str(round(time.time()-start,2)),'s\n'
###
if __name__ == '__main__':
	main()
else:
	pass
